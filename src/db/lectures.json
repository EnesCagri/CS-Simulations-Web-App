[
  {
    "simulation_id": 4,
    "title": "Graph Coloring: Detailed Explanation",
    "sections": [
      {
        "heading": "1. Introduction",
        "paragraphs": [
          "Graph coloring is a combinatorial optimization problem that aims to assign colors to the nodes (or edges) of a graph while satisfying certain constraints. The most common version is 'proper' coloring, which prevents adjacent nodes from being assigned the same color."
        ]
      },
      {
        "heading": "2. Basic Concepts",
        "paragraphs": [
          "Graph (G): Represented as G = (V, E). V is the set of nodes, E is the set of edges.",
          "Proper Coloring: No adjacent node pair shares the same color. Chromatic Number (χ(G)): The minimum number of colors required to properly color a graph."
        ]
      },
      {
        "heading": "3. Common Algorithms",
        "paragraphs": [
          "Greedy: Orders nodes and assigns the smallest available color to each node. Feature: Fast but sensitive to ordering.",
          "Welsh–Powell: Orders nodes by decreasing degree, then applies Greedy. Feature: Generally uses fewer colors.",
          "DSATUR: Gives priority to the node with the most differently colored neighbors. Very successful in practice."
        ]
      },
      {
        "heading": "4. Complexity and Theorems",
        "paragraphs": [
          "Graph coloring is generally NP-complete; finding χ(G) or testing k-colorability are among NP-hard problems.",
          "Four Color Theorem: Every planar graph can be colored with at most 4 colors.",
          "Brooks' Theorem: For connected graphs, χ(G) ≤ Δ(G), except for complete graphs and odd cycles."
        ]
      },
      {
        "heading": "5. Application Areas",
        "list": [
          "Map Coloring (adjacent regions)",
          "Register Allocation (compiler optimization)",
          "Scheduling, Frequency Assignment, etc."
        ]
      },
      {
        "heading": "6. Step-by-Step Example",
        "paragraphs": [
          "V = {A,B,C,D,E}, E = {{A,B},{A,C},{B,C},{B,D},{C,E}}. Order by decreasing degree: B(3), C(3), A(2), D(1), E(1). Color assignments: B→1, C→2, A→3, D→2, E→1 → Number of colors used: 3."
        ]
      }
    ]
  },
  {
    "simulation_id": 1,
    "title": "Bubble Sort: Detailed Explanation",
    "sections": [
      {
        "heading": "1. Introduction",
        "paragraphs": [
          "Bubble Sort is a simple sorting algorithm that compares adjacent elements and swaps them when necessary, pushing the largest (or smallest) element to the end in each pass."
        ]
      },
      {
        "heading": "2. Basic Concepts",
        "paragraphs": [
          "Array: Fixed-size, indexed collection of data.",
          "Swap: Exchanging positions of two elements to achieve sorting."
        ]
      },
      {
        "heading": "3. Algorithm Steps",
        "paragraphs": [
          "In an n-element array, the last i elements are considered sorted after i passes.",
          "From j = 0 to n-i-2, each adjacent pair is compared and swapped if necessary."
        ]
      },
      {
        "heading": "4. Time Complexity",
        "paragraphs": [
          "Worst Case: O(n²)",
          "Best Case: O(n) (if array is pre-sorted, with optimization)",
          "Average Case: O(n²)"
        ]
      },
      {
        "heading": "5. Application Areas",
        "list": [
          "Data structure teaching examples",
          "Small dataset sorting and prototyping"
        ]
      },
      {
        "heading": "6. Step-by-Step Example",
        "paragraphs": [
          "Array = [5, 3, 8, 4], Pass 1: [3,5,4,8], Pass 2: [3,4,5,8] → Result: [3,4,5,8]"
        ]
      }
    ]
  },
  {
    "simulation_id": 2,
    "title": "Linear Search: Detailed Explanation",
    "sections": [
      {
        "heading": "1. Introduction",
        "paragraphs": [
          "Linear Search is a simple search algorithm that sequentially checks elements in an array to find the target value."
        ]
      },
      {
        "heading": "2. Basic Concepts",
        "paragraphs": [
          "Array: Ordered collection of data.",
          "Index: Number indicating the position of elements in the array."
        ]
      },
      {
        "heading": "3. Algorithm Steps",
        "paragraphs": [
          "Start from the beginning of the array.",
          "Compare each element with the target value.",
          "If a match is found, return the index.",
          "Continue until the end of the array."
        ]
      },
      {
        "heading": "4. Time Complexity",
        "paragraphs": [
          "Worst Case: O(n)",
          "Best Case: O(1)",
          "Average Case: O(n)"
        ]
      },
      {
        "heading": "5. Application Areas",
        "list": [
          "Searching in small datasets",
          "Searching in unsorted arrays",
          "Searching in simple data structures"
        ]
      },
      {
        "heading": "6. Step-by-Step Example",
        "paragraphs": [
          "Array = [5, 3, 7, 1, 9], Target = 1. Steps: 5≠1, 3≠1, 7≠1, 1=1 → Found, index = 3"
        ]
      }
    ]
  },
  {
    "simulation_id": 3,
    "title": "Binary Search: Detailed Explanation",
    "sections": [
      {
        "heading": "1. Introduction",
        "paragraphs": [
          "Binary Search is an efficient algorithm that halves the search space at each step when searching in a sorted array."
        ]
      },
      {
        "heading": "2. Basic Concepts",
        "paragraphs": [
          "Sorted Array: Array with elements in a specific order.",
          "Middle Point: Element at the center of the search space."
        ]
      },
      {
        "heading": "3. Algorithm Steps",
        "paragraphs": [
          "Check the element at the middle of the array.",
          "If target is smaller than middle element, search in left half.",
          "If target is larger than middle element, search in right half.",
          "Continue until match is found or search space is empty."
        ]
      },
      {
        "heading": "4. Time Complexity",
        "paragraphs": [
          "Worst Case: O(log n)",
          "Best Case: O(1)",
          "Average Case: O(log n)"
        ]
      },
      {
        "heading": "5. Application Areas",
        "list": [
          "Fast searching in sorted arrays",
          "Database indexing",
          "Dictionary and phone book searches"
        ]
      },
      {
        "heading": "6. Step-by-Step Example",
        "paragraphs": [
          "Array = [1, 3, 5, 7, 9], Target = 7. Steps: Middle 5<7, search right half; Middle 7=7 → Found, index = 3"
        ]
      }
    ]
  },
  {
    "simulation_id": 5,
    "title": "Pathfinding: Detailed Explanation",
    "sections": [
      {
        "heading": "1. Introduction",
        "paragraphs": [
          "Pathfinding is a collection of algorithms that aim to find the shortest or most suitable path between two points on a graph."
        ]
      },
      {
        "heading": "2. Basic Concepts",
        "paragraphs": [
          "Graph: Data structure consisting of nodes and edges.",
          "Weight: Value indicating the cost of edges."
        ]
      },
      {
        "heading": "3. Common Algorithms",
        "paragraphs": [
          "Dijkstra: Shortest path algorithm for cases where all edges have positive weights.",
          "A*: Heuristic search algorithm that speeds up search by making estimates toward the goal.",
          "BFS: Used for shortest path in unweighted graphs."
        ]
      },
      {
        "heading": "4. Time Complexity",
        "paragraphs": [
          "Dijkstra: O((V + E) log V)",
          "A*: O(b^d), b: branching factor, d: depth",
          "BFS: O(V + E)"
        ]
      },
      {
        "heading": "5. Application Areas",
        "list": [
          "GPS navigation systems",
          "Game AI",
          "Network routing protocols"
        ]
      },
      {
        "heading": "6. Step-by-Step Example",
        "paragraphs": [
          "Graph: A–5→B, A–1→C, B–1→D. Dijkstra(A) → A(0) → C(1) → B(5) → D(6) → Shortest path: A→C→B→D"
        ]
      }
    ]
  }
]
