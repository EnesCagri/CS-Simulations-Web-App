[
  {
    "simulation_id": 4,
    "title": "Graf Boyama: Detaylı Açıklama",
    "sections": [
      {
        "heading": "1. Giriş",
        "paragraphs": [
          "Graf boyama, bir grafın düğümlerine (veya kenarlarına) renkler atayarak belirli kısıtları sağlamayı amaçlayan bir kombinatoryal optimizasyon problemidir. En yaygın versiyonu, komşu düğümlere aynı rengin atanmasını engelleyen \"proper\" boyamadır."
        ]
      },
      {
        "heading": "2. Temel Kavramlar",
        "paragraphs": [
          "Graf (G): G = (V, E) biçiminde gösterilir. V düğümler kümesi, E ise kenarlar kümesidir.",
          "Proper Boyama: Hiçbir komşu düğüm çifti aynı rengi paylaşmaz. Kromatik Sayı (χ(G)): Bir grafı proper boyamak için gereken en az renk sayısı."
        ]
      },
      {
        "heading": "3. Yaygın Algoritmalar",
        "paragraphs": [
          "Greedy (Açgözlü): Düğümleri sıralayıp her düğüme mevcut en küçük uygun rengi atar. Özellik: Hızlı ama sıralamaya duyarlı.",
          "Welsh–Powell: Düğümleri azalan dereceye göre sıralar, sonra Greedy uygular. Özellik: Genelde daha az renk kullanır.",
          "DSATUR: Önceliği, çevresinde en çok farklı renkli komşusu olan düğüme verir. Pratikte çok başarılıdır."
        ]
      },
      {
        "heading": "4. Karmaşıklık ve Teoremler",
        "paragraphs": [
          "Graf boyama genel olarak NP-tamdır; χ(G)'yi bulmak veya k renkle boyanabilirliği test etmek NP-zor problemler arasındadır.",
          "Dört Renk Teoremi: Her düzlemsel graf en fazla 4 renkle boyanabilir.",
          "Brooks Teoremi: Bağlantılı graflar için χ(G) ≤ Δ(G), tam graflar ve tekil kenar grafı hariç."
        ]
      },
      {
        "heading": "5. Uygulama Alanları",
        "list": [
          "Harita Boyama (komşu bölgeler)",
          "Register Allocation (derleyici optimizasyonu)",
          "Zaman Çizelgeleme, Frekans Ataması vb."
        ]
      },
      {
        "heading": "6. Örnek Adım Adım",
        "paragraphs": [
          "V = {A,B,C,D,E}, E = {{A,B},{A,C},{B,C},{B,D},{C,E}}. Azalan derece sırasına göre B(3), C(3), A(2), D(1), E(1). Renk atamaları: B→1, C→2, A→3, D→2, E→1 → Kullanılan renk sayısı: 3."
        ]
      }
    ]
  },
  {
    "simulation_id": 1,
    "title": "Bubble Sort: Detaylı Açıklama",
    "sections": [
      {
        "heading": "1. Giriş",
        "paragraphs": [
          "Bubble Sort, bitişik elemanları karşılaştırıp gerektiğinde takas yaparak her turda en büyük (ya da en küçük) öğeyi sona iten basit bir sıralama algoritmasıdır."
        ]
      },
      {
        "heading": "2. Temel Kavramlar",
        "paragraphs": [
          "Dizi (Array): Sabit boyutlu, indeksli veri koleksiyonu.",
          "Takas (Swap): İki elemanın yerlerini değiştirerek sıralama sağlar."
        ]
      },
      {
        "heading": "3. Algoritma Adımları",
        "paragraphs": [
          "n elemanlı dizide i turunda son i eleman zaten sıralı kabul edilir.",
          "j = 0'dan n-i-2'ye kadar her bitişik çift karşılaştırılır ve gerekirse yer değiştirilir."
        ]
      },
      {
        "heading": "4. Zaman Karmaşıklığı",
        "paragraphs": [
          "En Kötü Durum: O(n²)",
          "En İyi Durum: O(n) (dizi önceden sıralıysa, optimizasyonla)",
          "Ortalama Durum: O(n²)"
        ]
      },
      {
        "heading": "5. Uygulama Alanları",
        "list": [
          "Veri yapıları öğretim örnekleri",
          "Küçük veri kümesi sıralamaları ve prototipleme"
        ]
      },
      {
        "heading": "6. Örnek Adım Adım",
        "paragraphs": [
          "Dizi = [5, 3, 8, 4], Tur 1: [3,5,4,8], Tur 2: [3,4,5,8] → Sonuç: [3,4,5,8]"
        ]
      }
    ]
  },
  {
    "simulation_id": 2,
    "title": "Linear Search: Detaylı Açıklama",
    "sections": [
      {
        "heading": "1. Giriş",
        "paragraphs": [
          "Linear Search (Doğrusal Arama), bir dizideki elemanları sırayla kontrol ederek aranan değeri bulmaya çalışan basit bir arama algoritmasıdır."
        ]
      },
      {
        "heading": "2. Temel Kavramlar",
        "paragraphs": [
          "Dizi (Array): Sıralı veri koleksiyonu.",
          "İndeks (Index): Dizideki elemanların konumunu belirten sayı."
        ]
      },
      {
        "heading": "3. Algoritma Adımları",
        "paragraphs": [
          "Dizinin başından başla.",
          "Her elemanı aranan değerle karşılaştır.",
          "Eşleşme bulunursa indeksi döndür.",
          "Dizinin sonuna kadar devam et."
        ]
      },
      {
        "heading": "4. Zaman Karmaşıklığı",
        "paragraphs": [
          "En Kötü Durum: O(n)",
          "En İyi Durum: O(1)",
          "Ortalama Durum: O(n)"
        ]
      },
      {
        "heading": "5. Uygulama Alanları",
        "list": [
          "Küçük veri setlerinde arama",
          "Sıralanmamış dizilerde arama",
          "Basit veri yapılarında arama"
        ]
      },
      {
        "heading": "6. Örnek Adım Adım",
        "paragraphs": [
          "Dizi = [5, 3, 7, 1, 9], Aranan = 1. Adımlar: 5≠1, 3≠1, 7≠1, 1=1 → Bulundu, indeks = 3"
        ]
      }
    ]
  },
  {
    "simulation_id": 3,
    "title": "Binary Search: Detaylı Açıklama",
    "sections": [
      {
        "heading": "1. Giriş",
        "paragraphs": [
          "Binary Search (İkili Arama), sıralı bir dizide arama yaparken her adımda arama alanını yarıya indiren verimli bir algoritmadır."
        ]
      },
      {
        "heading": "2. Temel Kavramlar",
        "paragraphs": [
          "Sıralı Dizi: Elemanları belirli bir sırada olan dizi.",
          "Orta Nokta: Arama alanının ortasındaki eleman."
        ]
      },
      {
        "heading": "3. Algoritma Adımları",
        "paragraphs": [
          "Dizinin ortasındaki elemanı kontrol et.",
          "Aranan değer ortadaki elemandan küçükse sol yarıda ara.",
          "Aranan değer ortadaki elemandan büyükse sağ yarıda ara.",
          "Eşleşme bulunana veya arama alanı boşalana kadar devam et."
        ]
      },
      {
        "heading": "4. Zaman Karmaşıklığı",
        "paragraphs": [
          "En Kötü Durum: O(log n)",
          "En İyi Durum: O(1)",
          "Ortalama Durum: O(log n)"
        ]
      },
      {
        "heading": "5. Uygulama Alanları",
        "list": [
          "Sıralı dizilerde hızlı arama",
          "Veritabanı indeksleme",
          "Sözlük ve telefon rehberi aramaları"
        ]
      },
      {
        "heading": "6. Örnek Adım Adım",
        "paragraphs": [
          "Dizi = [1, 3, 5, 7, 9], Aranan = 7. Adımlar: Ortadaki 5<7, sağ yarıda ara; Ortadaki 7=7 → Bulundu, indeks = 3"
        ]
      }
    ]
  },
  {
    "simulation_id": 5,
    "title": "Pathfinding: Detaylı Açıklama",
    "sections": [
      {
        "heading": "1. Giriş",
        "paragraphs": [
          "Pathfinding (Yol Bulma), bir graf üzerinde iki nokta arasındaki en kısa veya en uygun yolu bulmayı amaçlayan algoritmalar bütünüdür."
        ]
      },
      {
        "heading": "2. Temel Kavramlar",
        "paragraphs": [
          "Graf: Düğümler ve kenarlardan oluşan veri yapısı.",
          "Ağırlık: Kenarların maliyetini belirten değer."
        ]
      },
      {
        "heading": "3. Yaygın Algoritmalar",
        "paragraphs": [
          "Dijkstra: En kısa yol algoritması, tüm kenarların pozitif ağırlıklı olduğu durumlar için.",
          "A*: Sezgisel arama algoritması, hedef yönünde tahmin yaparak aramayı hızlandırır.",
          "BFS: Ağırlıksız graflarda en kısa yol için kullanılır."
        ]
      },
      {
        "heading": "4. Zaman Karmaşıklığı",
        "paragraphs": [
          "Dijkstra: O((V + E) log V)",
          "A*: O(b^d), b: dallanma faktörü, d: derinlik",
          "BFS: O(V + E)"
        ]
      },
      {
        "heading": "5. Uygulama Alanları",
        "list": [
          "GPS navigasyon sistemleri",
          "Oyun AI'ları",
          "Ağ yönlendirme protokolleri"
        ]
      },
      {
        "heading": "6. Örnek Adım Adım",
        "paragraphs": [
          "Graf: A–5→B, A–1→C, B–1→D. Dijkstra(A) → A(0) → C(1) → B(5) → D(6) → En kısa yol: A→C→B→D"
        ]
      }
    ]
  }
]
