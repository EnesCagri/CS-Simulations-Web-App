{
  "codes": [
    {
      "simulation_id": 1,
      "codeTabs": [
        {
          "label": "Python",
          "language": "python",
          "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n\nif __name__ == \"__main__\":\n    data = [64, 34, 25, 12, 22, 11, 90]\n    sorted_data = bubble_sort(data)\n    print(\"Sıralanmış dizi:\", sorted_data)"
        },
        {
          "label": "Java",
          "language": "java",
          "code": "public class BubbleSort {\n    static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] data = {64, 34, 25, 12, 22, 11, 90};\n        bubbleSort(data);\n        System.out.print(\"Sıralanmış dizi: \");\n        for (int num : data) System.out.print(num + \" \");\n    }\n}"
        },
        {
          "label": "C++",
          "language": "cpp",
          "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n}\n\nint main() {\n    vector<int> data = {64, 34, 25, 12, 22, 11, 90};\n    bubbleSort(data);\n    cout << \"Sıralanmış dizi: \";\n    for (int num : data) cout << num << \" \";\n    return 0;\n}"
        }
      ]
    },
    {
      "simulation_id": 2,
      "codeTabs": [
        {
          "label": "Python",
          "language": "python",
          "code": "def linear_search(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    data = [5, 3, 7, 1, 9]\n    target = 1\n    result = linear_search(data, target)\n    print(\"Hedef bulundu, indeks:\", result)"
        },
        {
          "label": "Java",
          "language": "java",
          "code": "public class LinearSearch {\n    public static int linearSearch(int[] arr, int target) {\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == target)\n                return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] data = {5, 3, 7, 1, 9};\n        int target = 1;\n        int result = linearSearch(data, target);\n        System.out.println(\"Hedef bulundu, indeks: \" + result);\n    }\n}"
        },
        {
          "label": "C++",
          "language": "cpp",
          "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint linearSearch(const vector<int>& arr, int target) {\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == target)\n            return i;\n    }\n    return -1;\n}\n\nint main() {\n    vector<int> data = {5, 3, 7, 1, 9};\n    int target = 1;\n    int result = linearSearch(data, target);\n    cout << \"Hedef bulundu, indeks: \" << result << endl;\n    return 0;\n}"
        }
      ]
    },
    {
      "simulation_id": 3,
      "codeTabs": [
        {
          "label": "Python",
          "language": "python",
          "code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    data = [1, 3, 5, 7, 9]\n    target = 5\n    result = binary_search(data, target)\n    print(\"Hedef bulundu, indeks:\", result)"
        },
        {
          "label": "Java",
          "language": "java",
          "code": "public class BinarySearch {\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0, right = arr.length - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (arr[mid] == target)\n                return mid;\n            else if (arr[mid] < target)\n                left = mid + 1;\n            else\n                right = mid - 1;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] data = {1, 3, 5, 7, 9};\n        int target = 5;\n        int result = binarySearch(data, target);\n        System.out.println(\"Hedef bulundu, indeks: \" + result);\n    }\n}"
        },
        {
          "label": "C++",
          "language": "cpp",
          "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint binarySearch(const vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (arr[mid] == target)\n            return mid;\n        else if (arr[mid] < target)\n            left = mid + 1;\n        else\n            right = mid - 1;\n    }\n    return -1;\n}\n\nint main() {\n    vector<int> data = {1, 3, 5, 7, 9};\n    int target = 5;\n    int result = binarySearch(data, target);\n    cout << \"Hedef bulundu, indeks: \" << result << endl;\n    return 0;\n}"
        }
      ]
    },
    {
      "simulation_id": 4,
      "codeTabs": [
        {
          "label": "Python",
          "language": "python",
          "code": "def greedy_coloring(adj):\n    \"\"\"\n    adj: dict {node: [komşu1, komşu2, ...]}\n    döndürür: dict {node: renk}\n    \"\"\"\n    color = {u: None for u in adj}\n\n    for u in adj:\n        used = {color[v] for v in adj[u] if color[v] is not None}\n        c = 0\n        while c in used:\n            c += 1\n        color[u] = c\n\n    return color\n\n\nif __name__ == \"__main__\":\n    adj = {\n        0: [1, 2],\n        1: [0, 2, 3],\n        2: [0, 1, 4],\n        3: [1],\n        4: [2]\n    }\n    result = greedy_coloring(adj)\n    for node, clr in result.items():\n        print(f\"Düğüm {node} → Renk {clr}\")"
        },
        {
          "label": "Java",
          "language": "java",
          "code": "import java.util.*;\n\npublic class GraphColoring {\n    private int V;\n    private List<List<Integer>> adj;\n\n    public GraphColoring(int vertices) {\n        V = vertices;\n        adj = new ArrayList<>();\n        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());\n    }\n\n    public void addEdge(int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    public int[] greedyColoring() {\n        int[] result = new int[V];\n        Arrays.fill(result, -1);\n        result[0] = 0;\n        boolean[] available = new boolean[V];\n        Arrays.fill(available, true);\n\n        for (int u = 1; u < V; u++) {\n            for (int neighbor : adj.get(u)) {\n                if (result[neighbor] != -1)\n                    available[result[neighbor]] = false;\n            }\n            int cr;\n            for (cr = 0; cr < V; cr++) if (available[cr]) break;\n            result[u] = cr;\n            Arrays.fill(available, true);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        GraphColoring g = new GraphColoring(5);\n        g.addEdge(0,1); g.addEdge(0,2);\n        g.addEdge(1,2); g.addEdge(1,3);\n        g.addEdge(2,4);\n\n        int[] colors = g.greedyColoring();\n        for (int i = 0; i < colors.length; i++)\n            System.out.println(\"Düğüm \" + i + \" → Renk \" + colors[i]);\n    }\n}"
        },
        {
          "label": "C++",
          "language": "cpp",
          "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> greedyColoring(const vector<vector<int>>& adj) {\n    int V = adj.size();\n    vector<int> result(V, -1);\n    vector<bool> available(V, false);\n\n    result[0] = 0;\n    for (int u = 1; u < V; u++) {\n        for (int v : adj[u]) {\n            if (result[v] != -1)\n                available[result[v]] = true;\n        }\n        int cr;\n        for (cr = 0; cr < V; cr++) if (!available[cr]) break;\n        result[u] = cr;\n        fill(available.begin(), available.end(), false);\n    }\n    return result;\n}\n\nint main() {\n    int V = 5;\n    vector<vector<int>> adj = {{1,2},{0,2,3},{0,1,4},{1},{2}};\n\n    vector<int> colors = greedyColoring(adj);\n    for (int i = 0; i < V; i++)\n        cout << \"Düğüm \" << i << \" → Renk \" << colors[i] << endl;\n    return 0;\n}"
        }
      ]
    },
    {
      "simulation_id": 5,
      "codeTabs": [
        {
          "label": "BFS",
          "language": "python",
          "code": "from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n\n    while queue:\n        vertex = queue.popleft()\n        print(vertex, end=\" \")\n        for neighbor in graph[vertex]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\n\nif __name__ == \"__main__\":\n    graph = {\n        'A': ['B','C'],\n        'B': ['A','D','E'],\n        'C': ['A','F'],\n        'D': ['B'],\n        'E': ['B','F'],\n        'F': ['C','E']\n    }\n    bfs(graph, 'A')"
        },
        {
          "label": "DFS",
          "language": "python",
          "code": "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    print(start, end=\" \")\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited)\n\n\nif __name__ == \"__main__\":\n    graph = {\n        'A': ['B','C'],\n        'B': ['A','D','E'],\n        'C': ['A','F'],\n        'D': ['B'],\n        'E': ['B','F'],\n        'F': ['C','E']\n    }\n    dfs(graph, 'A')"
        },
        {
          "label": "Dijkstra",
          "language": "python",
          "code": "import heapq\n\ndef dijkstra(graph, start):\n    distances = {vertex: float('infinity') for vertex in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n\n    while pq:\n        current_distance, current_vertex = heapq.heappop(pq)\n        if current_distance > distances[current_vertex]:\n            continue\n        for neighbor, weight in graph[current_vertex].items():\n            distance = current_distance + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return distances\n\nif __name__ == \"__main__\":\n    graph = {\n        'A': {'B': 5, 'C': 1},\n        'B': {'A': 5, 'C': 2, 'D': 1},\n        'C': {'A': 1, 'B': 2, 'D': 4, 'E': 8},\n        'D': {'B': 1, 'C': 4, 'E': 3, 'F': 6},\n        'E': {'C': 8, 'D': 3},\n        'F': {'D': 6}\n    }\n    print(dijkstra(graph, 'A'))"
        },
        {
          "label": "A*",
          "language": "python",
          "code": "import heapq\n\ndef heuristic(a, b):\n    return abs(ord(a) - ord(b))\n\ndef a_star(graph, start, goal):\n    open_set = []\n    heapq.heappush(open_set, (0, start))\n    came_from = {}\n    g_score = {node: float('infinity') for node in graph}\n    g_score[start] = 0\n    f_score = {node: float('infinity') for node in graph}\n    f_score[start] = heuristic(start, goal)\n\n    while open_set:\n        _, current = heapq.heappop(open_set)\n        if current == goal:\n            path = []\n            while current in came_from:\n                path.append(current)\n                current = came_from[current]\n            path.append(start)\n            return path[::-1]\n\n        for neighbor, cost in graph[current].items():\n            tentative_g_score = g_score[current] + cost\n            if tentative_g_score < g_score[neighbor]:\n                came_from[neighbor] = current\n                g_score[neighbor] = tentative_g_score\n                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)\n                heapq.heappush(open_set, (f_score[neighbor], neighbor))\n\n    return None\n\nif __name__ == \"__main__\":\n    graph = {\n        'A': {'B': 5, 'C': 1},\n        'B': {'A': 5, 'C': 2, 'D': 1},\n        'C': {'A': 1, 'B': 2, 'D': 4, 'E': 8},\n        'D': {'B': 1, 'C': 4, 'E': 3, 'F': 6},\n        'E': {'C': 8, 'D': 3},\n        'F': {'D': 6}\n    }\n    print(a_star(graph, 'A', 'F'))"
        }
      ]
    }
  ]
}
